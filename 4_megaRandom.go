// Гениальный генератор случайных чисел. N последовательностей из 6 чисел, необходимо посчитать возможные суммы(по одному
// элементу из каждой последовательности).
// Решение: построчно считаем возможные суммы чисел, записываем в мапу, считаем возможные из мапы + с каждым новым элементом
// передаем значение из текущей мапы в постоянную
package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {
	var n int
	k := 6
	r := bufio.NewReader(os.Stdin)
	fmt.Fscan(r, &n)
	sums := make(map[int]struct{}) // нам интересны только различные ключи, значение пустая структура
	for i := 0; i < k; i++ {       //записываем в мапу первую последовательность из 6 чисел
		var num int
		fmt.Fscan(r, &num)
		if _, ok := sums[num]; ok {
			continue
		}
		sums[num] = struct{}{}
	}

	for i := 1; i < n; i++ {
		mSum := make(map[int]struct{}) // мапа для хранения новых сумм
		for j := 0; j < k; j++ {
			var num int
			fmt.Fscan(r, &num) //считываем новый элемент
			for a := range sums {
				if _, ok := mSum[a+num]; ok { //проверяем есть сумма из основной мапы+новый элемент в новой мапе
					continue
				}
				mSum[a+num] = struct{}{} // записываем новую сумму в новую мапу
			}
		}
		sums = mSum // передаем значения из новой мапы в основную
	}
	fmt.Println(len(sums)) // вывод количества сумм, которые можно из данных последовательностей
}
